Отбор: тюленбус/cezanne
Автор: 81805 november
Съотборник: 81831 oscar

Това домашно очаквам да е готино. Преди съм конфигурирал named dns server, като част от курса по
линукс системна администрация. Тогава си спомням, че бях разбрал доста от концепциите на dns, ама
знанията ми се оказаха нетрайни. Надявам се сега да успея да си ги преговоря. Все пак опитът от
миналото мисля, че ще ми е доста от полза. Помня общо взето главната идея. Създадох zone file,
който беше с CNAME-ите, A record-ите и тн, който ние разгледахме на лекции. После в named.conf файла
казвах, че съм master или slave на дадена зона. Конкретните команди и конфигурации не си ги спомням
съвсем. Интересно ми е разминаванетмо между разбирането на за zone file-а и че номерът, който
определя поредната промяна може да е дата. Това си спомням, че Hackman го ненавиждаше и казваше, че
е много лоша идея, защото ограничава броя промени до 99. Не знам дали това му беше основната
причина, но все пак ми се стори интересно. Готино е, че все още съм си запазил named.conf файла от
тогава, както и конфигурацията на зоната и сега вероятно ще мога да ги използва за референция. Този
път задачата е по-готина, защото реално ще работя и с друга машина и няма всичките ми тестове да са
само локално и вероятно ще има повече за конфигуриране. 

Като начало реших да започна, като попрочета малко сам за named, за да си припомня забравнето. Първи
наред бях man страниците. След като инсталирах bind9 видях named.conf(5) страницата, в която имаше
разписани всичките опции за различните обекти, като access control list-и, key-ове и доста други,
като masters, които май бяха машините, на които си slave, ако не е очевидно по името, server, което
е конфигурацията на сървъра да не повярва човек и zone-ите, които вероятно ще са едно от
най-важните неща. За жалост няма много информация в named.conf с описания за различните опции, но
тази страница препоръчваше да рагледам named, named-checkonf и rndc, така че реших да продължа с
това. named е команда за пускане на dns сървъра. Може да се иползва за конфигуриането на
конфигурационнията му файл, порта, дали да работи във foreground, брой socket-и и други. Цялостно
видях,че не се препочъчва да се работи със signal-и, когато използваме named, а да се използва rndc,
което вероятно ще разгледам след това. named-checkzone и bind9 reference manual-а бяха споменати,
в бележките накрая на man страницата. Препоръчваше се да ги видя. И сега се сетих, че named-checkonf
май проверяваше просто дали ми е правилна конфигурацията на named сървъра(проверяваше синтаксиса в
named.conf файла). Отворих man страницата, за да си потвърдя и се оказах прав. Точно синтаксиса
проверяваше :D. Може с тази команда да пусна тестово зарежда на master зоните, което не съм убеден,
че знам точно какво прави. Предполагам ги тества по някакъв начин, а и също така има някакъв флаг за
четене на journal, ако има такъв, което пак не знам за какво е. Тези ще ги погледна после, ама сега
не ми се задълбава в подробности.

Ще видя за начало другите man страници. named-checkzone е като checkonf, но проверява zone файловете
дали са написани правилно. Тук пак се споменава journal файла и вече реших да прочета за какво е
тук: https://bind9.readthedocs.io/en/latest/advanced.html Явно е стандартната идея за journaling,
която се вижда и при операционните системи. Пази си последните промени по зоните в отделен файл
преди да ги запише в конфигурацията. Така е сървъра се пази при загуба на конфигурация по време на
срив. Като отново се пусне промените от journal-а се прилагат последователно и сървъра се връща в
поредишното си състояние. Това прави и сървъра по-бърз, защото не е нужно постоянно да прави
dump-ове(записване на всички данни за обновената зона в конфигурационния файл).

В горния линк беше споменато rndc и се сетих, че се използваше за динамична промяна на
конфигурациите на named сървъра с идеята да не се налага той да бъде спиран/рестартиран.  Все пак ще
прегледам и неговия man page. Цялостно rndc има доста опции. Мога да добавя и затрия зона, мога да
freeze-на сървъра, така че да зъбраня динамичните update-и на различни зони, мога да изчиста кеша на
зоната, да спра сървъра с halt, да презаредя конфигурационния файл за дадена зона с reload, което
вероятно ще е от полза, zonestatus, което показва статуса на зона и още 300 опции.  rndc има
конфигурационен файл rndc.conf. Като цяло видях, че е със сходен синтаксис на named.conf само, че с
по-малко секции като options, key и server, които служат съответно за някакви опции за rndc (като
ключ/сървър по подразбиране), ключове, които rndc използва, за да получи право да конфигурира даден
сървър, и казване на rndc с кой сървър кой ключ да използва или по-точно кои сървъри може да 
конфигурира все едно. От тук верифицирах, че ключовете не се използват за криптиране май: 
https://www-uxsup.csx.cam.ac.uk/pub/doc/redhat/redhat7.3/rhl-rg-en-7.3/s1-bind-rndc.html#:~:text=In%20order%20to%20prevent%20unauthorized,conf%20and%20%2Fetc%2Frndc.

Като следващата стъпка реших да разгледам bind9 документацията. Създадох си обща представа за кои са
командите и за какво служат, но не съм стигнал до това да си конфигурирам dns зони все още. Всичко
до сега беше четене на man страници, но сега ще разгледам информацията от тук: 
https://bind9.readthedocs.io/en/latest/introduction.html 

Преди това да отбележа, че този път с netstat погледнах дали работи named сървъра и отговорът беше
не. После просто го пуснах за здраве. Преди питахте, защо използва nmap вместо nestat и лично ми е
просто по-лесно за четене. Иначе netstat -ntlup с 500-те си флага също върши работа и се разбира.

Като начало беше полезно да изчета introduction-а на bind9. Цялостно верифицирах какво е заданието и
че нещата ще работят, както бих очаквал. Аз правя мастър сървър за зоната weber.openfmi.net. , а
Ирина ще направи slave, който чете моята конфигурация, демек аз съм start of authority сървър. После
аз трябва да се конфигурирам, като нейн slave XD за нейния композитор и така. Честно вече мисля, че
знам как ще стане конфигурацията. Правя файл за zone-ата и я конфигурирам в named.conf. После
в named.conf казвам, че отговарям и за зоната на Ирина, само че там ще отбоелжа, че тя ми е мастър и
би трябвало да съм готов. Все пак реших преди да продължа да попрочета още малко документацията.
Поне да разгледам опциите мисля, че ще е от полза. А и забелязах, че конфигурацията на named не е
под /etc, а е под /etc/bind с доста повече файлове. Вероятно ще е добре да разгледам и спецификите 
на файловете при debian от този линк: https://wiki.debian.org/Bind9 , ама това после. 

steatlth server - това е сървър, на който parent domain-а в йерархията не е делегирал права за
subdomain. Демек той е authoritive за зоната, но трябва да му се доверяваш. Един вид не е официален.

forwarding server - когато не искаме всеки dns сървър да има достъп до интернет. Примерно имаме
кеширащ name server, който праща заявката към втори forwarding сървър, който може да праща трафик 
навън. Това може да е полезно в мрежа с firewall, която може да се напусне само от forwarding
сървъра. 

caching and authoritive server - препочъчва се един сървър да е само caching или само authoritive,
защото така работи по-добре. Така authoritive сървъра може да не отговаря на рекурсивни ивиквания и
да се грижи за заявки към своята зана, а кеширащия сървър може да се сложи зад firewall за
по-сигурно и да отговаря на всякакви други заявки, като вероятно участва и forwarding сървър.

Разгледах примерните конфигурации от тук: https://bind9.readthedocs.io/en/latest/configuration.html
Демонстрирани са access control list-ите, които ограничават достъп до кеширащ сървър само от
локалните мрежи. Тук реално има решение на заданието XD. Примерът с primary и secondary(master и
slave) сървърите служи точно за това. Аз казвам, че съм master и отговарям за съответната зона и
тези адреси им позволявама transfer(да ми четат конфигурацията и да я копират). После аз казвам, че
съм slave на еди кой си сървър и ще пази информацията му в еди кой си файл и общо взето съм готов.
:D. Остава само зоната да си опиша, ама това надали е толкова трудно. Тук е показан и тривиалния
load balancing(round robin), който обсъдихме на лекции. В другата част на тази страница пак са
разгледани команди като dig, nslookup, host, rndc, named-confcheck и други. Цялостно повечето от
тези команди съм ги обяснил по-горе, а dns name resolv-ърите сме ги говирили в часовете. Май само
host не сме споменали и доколкото знам dig е най-готин с най-много информация. Описано е и как може
да се добавят plugin-и за named. В момента има само query plugin-и, но в бъдеще вероятно ще се
появят и други типове. Това прави сървъра по-лек, като може да се разшири при нужда.

Намерих и тежката артилерия: https://bind9.readthedocs.io/en/latest/reference.html
Тук има всяка опция за named.conf описана подробно и този списък е доста дълъг.
Видях, че има предварително дефинирани acl-и като any и localhost. Има controls опция, която
контролира какво можеш да правиш с rndc. В секцията за ключвете пише, че като конфигурирам server
мога да му сложа ключ и така всяка заявка към него ще бъде подписана с този ключ. Това може да е
удобно, ако искам сигурна връзка с човека от другата страна. От моята страна май acl-ите се
използват, за да си потвърдя, че заявката е подписана с ключ, но трябва повече да погледна.
Малко по-късно открих това:
https://bind9.readthedocs.io/en/latest/reference.html#address-match-lists , което всъщност се
използва за верифициране, че даден сървър се е подписал с даден ключ преди да му обработя заявката.
Има подробна секция за логове, в която са описани 300 неща, като не всички прочетох. Загледах се в
това, че има channels, в които се пращат логове и мога да кажа какви точно логове да пратя в тези
channels, като използвам category-ии. Цялостно мога да искам в даден файл само това дали потребител
е бил оторизиран и тогава бих използвал security категроията с даден канал, който сочи към файл
Цялостно мога да искам в даден файл само това дали потребител е бил оторизиран и тогава бих
използвал security категроията с даден канал, който сочи към файл.

masters - позволява да изредя множество от master сървъри, така че по-лесно да ги използвам в
named.conf

options - тук има 100000000 опции. Цялостно това са конфигурации за целия сървър. Например мога да
му задам всякакви типове secret-и за генериране на  ключове, като diffe hellman напримпер, или пък
мога да пусна dnstap, за да имам още логове, мога да подам файл с ключове, мога да поставя квоти,
има нещо наречено dns64, което прави mapping от ipv6 към ipv4, ако няма AAAA entry-та. Това се
използва с NAT64, което прави каквото прави NAT, само че за ipv4 и ipv6(превежда ipv4 адрес към ipv6
и обратно. Използва се за миграция от ipv4 към ipv6). Тази секция е интересна, ама само я минах
набързо, защото ще ми свърши живота докато я разгледам цялата.

Идеята на схемата с ключовете за верифициран на съобщенията е, че се генерира хеш на съобщението
преди да се прати и се добавя към съобщението и после, като от другата страна получат съобщението
пак се генерира хеша и ако съвпадата значи доверен човек го е пратил. Secret-а за ключът предварително
трябва да е разменен между мен и Ирина в случая.

Аз се демотивирах да чета всяка малко опция в options, защото са мега много и реших да разгледам server:
С keys мога да кажа, че ще използвам даден key за подписването на съобщенията си до даден сървър.
Интересно беше provide-ixfr, което позовлява incremental zone transfers, което доколкото разбирам
означавам, че се пращат само проемните за даден зонален файл, а не се праща целия файл:
https://networkencyclopedia.com/incremental-zone-transfer/ . Преди се е пращал целия файл и това не
е толкова ефикасно(axfr). request-expire пита master сървъра за expiration time на зоната, за да
знаем кога да я обновяваме. Видях няколко опции за edns и ми стана интересно какво е. Погледнах в
уикипедия и видях, че с времето dns е било ограничено до размера на udp пакетите и това не е било
възможно да се промени, ако искаме backwards compatibility. Съответно хората са добавили
допълнително флагове, които да се използват в тези ситуации и да казват на dns сървъра, че поддържа
допълнително feauture-и, като udp пакети > 512 байта и подобни. Това става с pseudo resource record
наречен OPT. OPT съдържа полета за до 16 допълнителни флага, като например UDP. Като се прати заявка
с OPT се знае, че този сървър поддържа EDNS и му се отговаря с OPT. Никога не се отговаря с OPT, ако
първоначалната заявка не го е съдържала. Горният request-expire също е EDNS flag, който се
използва за искане на expire time за зоната. Има и други edns flag-ове като версия, max-udp-size,
padding за по-голям размер на пакета, т че да съвпада с желания block size. tcp-keepalive, за да се
следи дали другия сървър е на линия. Може да кажем на другия сървър да ни праща по няколко resource
record-а наведнъж в едно съобщение или една по едн в различни с transfer-format. Може и да ограничим
броя на идващите зони с transfers. Може notify, transfer и query съобщения да се пращат на различни
ipv4/ipv6 адреси за даден сървър. Може да се праща и cookie, че се използва edns. Тази секция ми се
стори важна и затова прегледах по-подробно опциите.

statistics-channels - конфигурира се накъде да се пращат статистики за даден сървър, който да се
използват от системите администратори.

trust-anchors - казваме, че даден публичен ключ за non-authoritive сървър е верифициран и сигурен.
Това се използва, когато не можеш по друг начин да го потвърдиш. Тук като гледам има доста опции, но
документацията е дълга и в момента това май няма да ми е нужно, така че ще продължа напред. Виждам,
че може да се сложи dnssec-policy секция, в която да кажем какви са политиките за сигурност на нашия
dns сървър. Има max-zone-ttl, ключове, signature-refresh и signature-validity и доста други. Преди е
имало trusted-keys и managed-keys, които сега се конфигурират с trust-anchors static key и
trust-anchors initial-key съответно. Това може да е важно, ако искам с Ирина да използваме ключ за
обмен на зоните. Не съм още на 100% дали hmac-а не може да се верифицира по подразбиране с
предварително разменен secret, като се генерира наново. Може би малко ме бърка тук защо казвам, че
даден ключ е сигурен. Не трябва ли и аз да съм го конфигурирал, т че да може да се верифицира
съобщението и на моя dns server. Ако остане време, ще се опитам да си изясна това преди да предам.

view - Позволява да правим различни конфигурации в зависимост на това кой пита. Мога да отговоря на
заявка за дадена зона, само ако си част от вътрешната мрежа на фирмата или мога да реагирам по
различен начин начин на заявки от различни отдели и да ги пращам в различни посоки примерно. Може
един отдел да има повече security feauture-и пуснати и да е по-трудно да вземе информация без права
примерно. Абе идеята е, че на дадено view мога да му сложа почти всички опции досега и да го
конфигурирам както искам за дадени потребители само.

zone - тази секция е дебела. Тук има много опции и варианти, но ми се струва важно да я разгледам
подробно. Ще започна с типовете на зоните:

master/primary - вече го обсъдихме по-горе. Сървъра е мастър за зоната и отговаря за нея.

slave/secondary - сървърът е slave. Може да му се конфигурират няколко master-а и да се автентицира
пред тях с TSIG ключ. Препоръчва се да му се конфигурира файл, в който локално да пази данни за
зоните, които реплицира.

mirror - Като slave сървър, но се валидират данните за зоните преди да се пратят като отговор на
дадена заявка. Използва се DNSSEC валидация. В уикипедия беше обяснено, че DNSSEC е extension на
DNS, който поддържа валидиране на данните с криптография. Защитава от атаки, като DNS cache
poisoning, в които DNS сървъра ти те пренасочва на malicious сайт с идеята да ти откраднат данните
примерно. DNSSEC не защитава от DoS атаки. Идеята е, че всички зони се подпиват преди да се пратят
на slave-овете и те трябва да верифицират, че те са валидни. Тук има доста да се задълбава, но в
момента нямам времето, така че ще го допрочета, ако има време. Mirror зоната има разлчиен бит
сложен. Вместо AA за authoritive answer има AD за authenticated data.

hint - използва се за задаване на root зоните.

stub - тази зона идва от bind. Тя копира само NS record-ите на мастър зоната. Идеята й е да разкара
glue record-ите от master зоната, като ги замести с данни в named.conf за stub зоната. Може също
така да се използва, за да се накара resolution-а на даден домейн да използва конкретен сървър.

static-stub - като стъб, ама не се репликират NS и glue record-ите, а се конфигурират статчино.
Предполагам това е полезно, ако искаш по-малко overhead по мрежата, ама други идеи нямам защо бих го
ползвал.

forward - конфигурира forwarding на база домаейн. С forwarders опцията се казва накъде да се прати
заявката за дадената зона.

redirect - използва се за нещо наречено NXDOMAIN: https://tools.ietf.org/html/rfc8020 . В rfc-то
пише, че това е response code-а, който dns resolver-а получава, ако domain-а, който търси не
съществува. С други думи, ако не открием domain-а може да конфигурираме zone-ата, така че да
пренасочи потребителя към други сървъри.

delegation-only - всеки отговор за даден domain, който не съдържа информация на кого е делегиран се
счита за NXDOMAIN, т.е. domain-а не е открит. Това не важи за leaf зони в dns-а разбира се.
Този линк ми помогна да се усетя, че бяхме говорили какво е делегиране на domain(NS record),
ама нещо изключих, че това е термина:
https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/reviewing-dns-concepts#:~:text=A%20delegation%20is%20a%20record,to%20servers%20in%20other%20zones.

in-view - ако дадена зона я има конфигуриране в друго view със същата конфигурация, която на теб ти
трябва в настоящето може да използваш този тип и така зоната не се зарежда два пъти.

flag-ове:
Тук са описани allow flag-овете :
https://bind9.readthedocs.io/en/latest/reference.html#access-control Примерно allow-notify, което
казва на сървъра, че има промени в зоната. allow-update, което позволява на друг host да обновява
primary сървър с rndc dynamic dns updates. allow-transfer, което ще ми трябва, да позволя на Ирина
да получава zone-transfers от мен, blackhole - сървъри, които директно режем и не им отговаряме и
други.

database - мога да променя типа на bind9 базата данни. По подразбиране се използват черверно черни
дървета.
journal - променя journal filename-ма
file - къде пазим данните за зоните или откъде ги четем, ако сме master приемрно.

Добре де прегледах имената на флаговете и повечето ми се сториха безползни. Голяма част от тях са за
ограничаване на трафика или какво е позволено да прави нашия сървър. Ние такива изисквания нямаме,
така че няма да чета всичките подробно или поне няма да хабя време да опиша всеки флаг.

На края на горния линк е обяснен синтаксиса на zone файла, който ние доста подробно разгледахме и на
лекция, като също така е обяснено какви директиви има. Ние видяхме $ORIGIN, но има и други, като
$TTL, което задава time to live на всеки record по подразбиране. $INCLUDE може да include-не друг
файл. Обяснява, че @ е синоним на $ORIGIN <името на зоната>. с точка накрая. Обясняват и че ако
имаме един domain не е нужно да го пишем на всеки ред за последователни record-и. Той по
подразбиране се отнася и за следващия с цел четимост. $GENERATE може да се ипозлва за генериране на
record-и. Например, ако имаме един рекорд за 127 адреса, може да използваме generate, който да
промени само част от адресите. Накрая са обяснени и форматите на zone файловте, ама нещо не ми се
четат XD. Особено като се замисля, че трябва да изчета и спецификите за debian в линка, който пратих
по-горе по спомен. Ама ето го пак за всеки случай: https://wiki.debian.org/Bind9

Преди това обаче малко за key-овете. Видях, че мога да ги сложа в allow-transfers, защото в
документацията имаше такове поле: https://bind9.readthedocs.io/en/latest/reference.html#address-match-lists
за address-match-list-element : allow-transfer { <address_match_element>; ... }; Доколкото видях в
примерните address_match_element съвпада и с address_match_list_element. Така мисля, че би трябвало
да стане.

В документацията на debian са описани различните файлове. Има стандартният named.conf, който обаче е
под /etc/bind/ , а не само под /etc и също така named.conf е разделен на зони. Има key file, който
мога да include-на и вероятно ще пробвам да използвам с Ирина. После има файл с default зоните, за
DNS, reverse dns, broadcast dns и forwarders. Има файл за глабалния options field с конфигурациите.
Има local файл, в който ще трябва да дефинирам моите зони. Има файл за конфигурацията на логовете и
май главните са това. Общо взето са разбили глобалния файл на няколко. 

Във /var/lib/bind се пазят zone файловете и там трябва да си добавя моя. Има на сайта и примерен
файл, който вероятно ще копирам и модифицирам, че винаги забравям колко са полетата с числата.

В линка също се обяснява, че е добра идея bind9 сървъра да работи в chroot среда с bind като owner
на service-а и е описано как да се направи. Това обаче ми се струва твърде сложно и безсмилено за
нашите цели. Ппц би било по-готино да е в chroot среда от гледна точко сигурност, но цялостно нямам
времето да си играя да го подкарам така. -u bind флага иначе го има по подразбиране. Проверих в
/etc/default/bind

Ще започна с това да си направи zone файл за weber.openfmi.net. Правенте на файла леко ме обърка.
Сега се усетих, че аз реално не отговарям на някакъв по конкретен request. По условие не ми е казано
дали трябва да връщам някакъв A record. Също така леко ме обърка кой трябва да е master-а на този
zone: https://en.wikipedia.org/wiki/SOA_record . Тук конкретното поле е кръстено MNAME(master name).
Сега аз трябва ли да сложа ns1.weber.openfmi.net там или нещо подобно? Не съм сигурен. Това
означава, че трябва да имам glue record за това ns1 и към него ще се пращат update и notify
request-и. 

Тук малко си изясних проблемите: https://www.zytrax.com/books/dns/ch8/ns.html . Трябва задължително
да има поне един ns record за private dns сървър и поне два ns record-а за публични dns server-и и
те трябва да сочат към name server-ите, които използвам. Въпростът е, че не съм сигурен какво
означава това. Кои са тези name server-и, към който соча? Единия мисля, че съвпада с master name-а
от SOA записа, ама честно не знам откъде да извадя тези ip address-и? Това ме забърква общо взето.
Стана ми и по-ясно какво значи да делегираш зона на някого. Мисля, че го бях разбрал преди, ама
сега ми е леко завъртяно. Надолу в линка се казва, че ns3.us.example.com се грижи за us.example.com.
Всъщност аз така го разбирах. Може би ме бърка какъв е смисъла от NS запис за настоящата зона, в
която съм. Аз разбирам, че има смисъл от NS запис, за да делегирам под domain, но защо на мен самия?

Намерих човек със същия въпрос: https://serverfault.com/questions/524452/purpose-of-an-ns-record-for-the-current-zone-in-a-dns-zone
Общо взето май тези NS записи се използват, за да се потвърди, че аз съм този, за когото се
представям, т.е. че наистина съм SOA. Това тотално не е така май. Най-накрая го разбрах след като
прочетох този линк: https://superuser.com/questions/621105/purpose-of-an-ns-record-for-the-current-zone-in-a-dns-zone
Пак е stackoverflow тип, ама за конкретния въпрос мисля, че е ок. Схванах, че като някой пита за
нещо до моята зона той стига до мен по DNS йерархията и аз съм SOA запис, т.е. той ми се доверява и
аз мога да му кажа, че за тази зона, за която аз съм SOA запис отговарям аз, като name server и
машината на Ирина, която е моя slave. Така вече той може спокойно да ме попита за моите A записи или
да попита машината на Ирина, като вече ми има доверие. След 300 зора го схванах. Много завъртяно е и
не мисля, че е добре описано на повечето места, които открих.

Сега със named-checkzone си верифицирах зоната и тя вече работи. Остана да я добавя в local файла на
named.conf. syntax-highlithing-а на vim не работеше заради custom файловете и трябваше малко да
гугълна за setfiletype named командата, която ми свърши работа. Намерих я тук плюс малко гадаене:
https://vi.stackexchange.com/questions/5201/how-do-i-tell-vim-that-some-file-extensions-are-synonymous

Също така се чудех какво е разликата между /var/lib/bind /var/cached/bind и /etc/bind. Видях, че и
на трите места се слагат zone файлове и се чудех къде да сложа моите. Намерих в гугъл това:
/var/lib/bind/ - master and dynamic zones

/var/cache/bind/ - secondary zones

/etc/bind/ - zones that should not change for the lifetime of the server.

тук: https://serverfault.com/questions/85161/should-i-use-etc-bind-zones-or-var-cache-bind
Това очевидно не е официално, но ми харесва. Не знам дали има официален начин за съхранение.
Използвах и горния линк, който споменах, че доста добре решава задачата XD. Мисля, че реално той е
достатъчен, за да конфигурирам сървъра. Може само да кажа, че искам да използвам конкретен key с
Ирина вместо да е само allow-transfers{ ip address } за по-сигурно, а и то не знам как ще се
навържат нещата дори сега. Може по подразбиране да е нужен ключ. Видях в named.conf.options файла да
са сложени конфигурации. Също така, за да тествам използвах dig и nslookup. Бях добавил и бонус A
record в zone файла освен двата glue record-а отговарящите за моята зона, които сочат към моята и
машината на Ирина. Той сочи към едно от ip-тата на гугъл и пробвах през браузър да го достъпя,
използвайки url-а: google.weber.openfmi.net и това сработи. Гугъл ме отрязаха разбира се, защото не
си познаха url-а, но не получих 404, което значи, че все пак работи :D. Остана само да изчакам Ирина
да си конфигурира нейната машина, за да пробвам с dig дали мога да я питам и нея за моята zone-а и
после да пробвам да питам моята машина за нейната зона. Готов съм на ред 333. Илуминати потвърден.
След като Ирина си оправи сървъра проверих дали се е генерирал файл с нейната зона и отговорът е да,
така че успешно съм станал master и slave. За да си потвърдя, че всичко работи си спрях сървъра и
пратих заявка към този на Ирина и стана. Имах отговор за моите зони. След време това би трябвало да
expire-не, но за кратко време след това работи. Спомних си и +trace опцията с която си потвърдих,
че наистина Ирина ми отговаря. Това прави рекурсивно извикване и май беше на късмет, че ми излезе
тя, защото със същия късмет можех и аз да изляза, ама все пак е вярно. Сега ще пробваме да конфигурираме
и ключ, но е почти 11, така че ще предам това засега.

Като начало за целта прочетох това:
https://www.digitalocean.com/community/tutorials/how-to-setup-dnssec-on-an-authoritative-bind-dns-server-2#dnssec-resource-records
което обаче показва как с dnssec да генерирам ключ и да подпиша зоната, така че да е ясно, че e
тя е валидна и не ти дава тази информация някой malicious потребител. Разбрах и на +trace на dig какво
са дългите стрингове, които явно са ключове потвърждаващи record-ите май.

Намерих това, което е реално желаното: 
https://sort.veritas.com/public/documents/via/7.0/linux/productguides/html/vcs_bundled_agents/ch03s06s06s06.htm
Не съм сигурен само последната част за какво е. Ами пробвахме така, ама май не работи точно така. 
Опитах се да добавя и server с keys и да използвам него за комуникация с Ирка, ама нещо не ми сме
получи, а имам 3 минути само. Ще го погледна после още малко, но нямам време да го предам поне.

Време: 11 часа
